name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: 🔧 Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort mypy bandit safety
        
    - name: 🔍 Validar dependencias
      run: |
        echo "🔍 Verificando dependencias..."
        pip check
        safety check --bare
        
    - name: 🎨 Linting con Black
      run: |
        black --check --diff .
        
    - name: 📏 Linting con isort
      run: |
        isort --check-only --diff .
        
    - name: 🔍 Linting con Flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🔍 Type checking con MyPy
      run: |
        mypy app/ --ignore-missing-imports --no-strict-optional || true
        
    - name: 🧪 Ejecutar tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing --cov-report=html
        
    - name: 📊 Subir coverage a Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: 📁 Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
        
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: 🔧 Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit
        
    - name: 🔍 Security scan con Bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: 🛡️ Security scan con Safety
      run: |
        safety check --json --output safety-report.json || true
        
    - name: 🔍 Security scan con pip-audit
      run: |
        pip-audit --format json --output pip-audit-report.json || true
        
    - name: 📁 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
        
  build:
    name: 🏗️ Build & Deploy Check
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: 🔧 Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🗄️ Test database setup
      run: |
        python -c "
        from app import create_app
        from app.database import db
        app = create_app()
        app.config['TESTING'] = True
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
        with app.app_context():
            db.create_all()
            print('✅ Database setup successful')
        "
        
    - name: 🚀 Test application startup
      run: |
        timeout 30s python -c "
        from app import create_app
        app = create_app()
        print('✅ Application startup successful')
        " || echo "Application startup test completed"
        
    - name: 📦 Test package build
      run: |
        python setup.py check --strict
        python -m build --sdist --wheel || echo "Build test completed"
        
  deploy-preview:
    name: 🌐 Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: 🔧 Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 📋 Deploy preview info
      run: |
        echo "🚀 Deploy preview would be created here"
        echo "📝 PR: ${{ github.event.pull_request.html_url }}"
        echo "🔗 Branch: ${{ github.head_ref }}"
        echo "👤 Author: ${{ github.event.pull_request.user.login }}"
        
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    
    steps:
    - name: 📊 Test Results Summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} | [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result }} | Security scans completed |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} | Build validation passed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "🎉 **All checks passed!** Ready for merge." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some checks failed.** Please review the logs." >> $GITHUB_STEP_SUMMARY
        fi
