[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "stock-management"
dynamic = ["version"]
description = "Sistema completo de gestión de inventario desarrollado con Flask"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Tu Nombre", email = "tu.email@ejemplo.com"}
]
maintainers = [
    {name = "Tu Nombre", email = "tu.email@ejemplo.com"}
]
keywords = ["inventory", "management", "flask", "python", "stock", "business"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business",
    "Topic :: Office/Business :: Financial :: Accounting",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "Flask>=3.0.0",
    "Flask-SQLAlchemy>=3.1.1",
    "Flask-CORS>=4.0.0",
    "Flask-Migrate>=4.0.5",
    "python-dotenv>=1.0.0",
    "flask-smorest>=0.42.0",
    "marshmallow>=3.20.1",
    "PyJWT>=2.8.0",
    "bcrypt>=4.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pip-audit>=2.4.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
docs = [
    "Sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
]

[project.urls]
Homepage = "https://github.com/USERNAME/REPO_NAME"
Documentation = "https://github.com/USERNAME/REPO_NAME#readme"
Repository = "https://github.com/USERNAME/REPO_NAME.git"
"Bug Tracker" = "https://github.com/USERNAME/REPO_NAME/issues"
Changelog = "https://github.com/USERNAME/REPO_NAME/blob/main/CHANGELOG.md"

[project.scripts]
stock-management = "app.cli:main"

[tool.setuptools]
packages = ["app"]

[tool.setuptools.package-data]
app = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

[tool.setuptools.dynamic]
version = {attr = "app.__version__"}

# Configuración de Black para formateo de código
[tool.black]
line-length = 127
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Configuración de isort para ordenamiento de imports
[tool.isort]
profile = "black"
line_length = 127
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["app"]
known_third_party = ["flask", "sqlalchemy", "marshmallow", "pytest"]

# Configuración de Flake8 para linting
[tool.flake8]
max-line-length = 127
max-complexity = 10
ignore = [
    "E203",  # whitespace before ':'
    "W503",  # line break before binary operator
    "E501",  # line too long (handled by black)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "env",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
]

# Configuración de MyPy para type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "flask.*",
    "sqlalchemy.*",
    "marshmallow.*",
    "pytest.*",
]
ignore_missing_imports = true

# Configuración de pytest para testing
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Configuración de coverage
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
