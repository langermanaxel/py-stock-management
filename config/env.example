# üîí Variables de Entorno - Sistema de Gesti√≥n de Inventario
# üìã INSTRUCCIONES:
# 1. Copia este archivo como .env: cp env.example .env
# 2. Completa los valores seg√∫n tu entorno
# 3. NUNCA subas el archivo .env al repositorio (ya est√° en .gitignore)

# =============================================================================
# üóÑÔ∏è CONFIGURACI√ìN DE BASE DE DATOS (OBLIGATORIO)
# =============================================================================

# Base de datos principal (elegir una opci√≥n)
DATABASE_URL=sqlite:///instance/stock_management.db

# Opciones alternativas (descomenta la que uses):
# DATABASE_URL=postgresql://usuario:password@localhost:5432/stock_management
# DATABASE_URL=mysql://usuario:password@localhost:3306/stock_management

# =============================================================================
# üîê CONFIGURACI√ìN DE SEGURIDAD (OBLIGATORIO)
# =============================================================================

# Clave secreta para Flask (generar una nueva y segura)
SECRET_KEY=tu-clave-secreta-super-segura-aqui-cambiala-por-una-nueva

# Clave JWT para autenticaci√≥n (generar una nueva y segura)
JWT_SECRET_KEY=clave-jwt-super-secreta-y-muy-larga-para-produccion-cambiala

# =============================================================================
# üåê CONFIGURACI√ìN FLASK (OBLIGATORIO)
# =============================================================================

# Entorno de Flask
FLASK_ENV=development

# Modo debug (True para desarrollo, False para producci√≥n)
DEBUG=True

# Configuraci√≥n del servidor
FLASK_RUN_HOST=127.0.0.1
FLASK_RUN_PORT=5000

# =============================================================================
# üîß CONFIGURACI√ìN SQLALCHEMY (OBLIGATORIO)
# =============================================================================

# Deshabilitar tracking de modificaciones (recomendado)
SQLALCHEMY_TRACK_MODIFICATIONS=False

# =============================================================================
# üìù CONFIGURACI√ìN CORS (OBLIGATORIO)
# =============================================================================

# Or√≠genes permitidos para CORS (incluir todos los puertos que uses)
# IMPORTANTE: Agregar el puerto donde sirves el frontend
CORS_ORIGINS=http://localhost:5000,http://127.0.0.1:5000,http://localhost:8080,http://127.0.0.1:8080,http://localhost:3000

# Configuraci√≥n adicional para CORS con credenciales
CORS_SUPPORTS_CREDENTIALS=True
CORS_EXPOSE_HEADERS=Set-Cookie,Authorization

# =============================================================================
# üîê CONFIGURACI√ìN JWT/AUTENTICACI√ìN (OBLIGATORIO)
# =============================================================================

# Tiempo de expiraci√≥n del token de acceso (en segundos)
JWT_ACCESS_TOKEN_EXPIRES=3600

# Tiempo de expiraci√≥n del token de refresh (en segundos)
JWT_REFRESH_TOKEN_EXPIRES=2592000

# =============================================================================
# üìä CONFIGURACI√ìN DE LOGS (OPCIONAL)
# =============================================================================

# Nivel de logging
LOG_LEVEL=INFO

# Archivo de logs
LOG_FILE=logs/app.log

# =============================================================================
# üìß CONFIGURACI√ìN DE EMAIL (OPCIONAL)
# =============================================================================

# Servidor SMTP
MAIL_SERVER=smtp.gmail.com

# Puerto SMTP
MAIL_PORT=587

# Usar TLS
MAIL_USE_TLS=True

# Usuario de email
MAIL_USERNAME=tu-email@gmail.com

# Password de aplicaci√≥n (NO tu password normal)
MAIL_PASSWORD=tu-password-de-aplicacion

# =============================================================================
# ‚ö° CONFIGURACI√ìN DE CACHE (OPCIONAL)
# =============================================================================

# URL de Redis para cache
# REDIS_URL=redis://localhost:6379/0

# =============================================================================
# üìà CONFIGURACI√ìN DE MONITOREO (OPCIONAL)
# =============================================================================

# DSN de Sentry para monitoreo de errores
# SENTRY_DSN=https://tu-dsn-de-sentry.sentry.io/proyecto

# =============================================================================
# üê≥ CONFIGURACI√ìN DOCKER (OPCIONAL)
# =============================================================================

# Puerto del contenedor Docker
# DOCKER_PORT=5000

# =============================================================================
# üîç CONFIGURACI√ìN DE TESTS (OPCIONAL)
# =============================================================================

# Base de datos para tests
# TEST_DATABASE_URL=sqlite:///instance/test_stock_management.db

# Modo de testing
# TESTING=True

# =============================================================================
# üìã VALORES RECOMENDADOS POR ENTORNO
# =============================================================================

# üöÄ DESARROLLO LOCAL:
# FLASK_ENV=development
# DEBUG=True
# DATABASE_URL=sqlite:///instance/stock_management.db

# üß™ TESTING:
# FLASK_ENV=testing
# DEBUG=False
# TESTING=True

# üöÄ PRODUCCI√ìN:
# FLASK_ENV=production
# DEBUG=False
# DATABASE_URL=postgresql://usuario:password@servidor:5432/stock_management

# =============================================================================
# ‚ö†Ô∏è IMPORTANTE - SEGURIDAD
# =============================================================================

# 1. NUNCA subas este archivo al repositorio
# 2. Cambia todas las claves secretas en producci√≥n
# 3. Usa variables de entorno del sistema en producci√≥n
# 4. Rota las claves JWT regularmente
# 5. Usa HTTPS en producci√≥n

# =============================================================================
# üîß COMANDOS √öTILES
# =============================================================================

# Generar clave secreta segura:
# python -c "import secrets; print(secrets.token_hex(32))"

# Generar clave JWT segura:
# python -c "import secrets; print(secrets.token_urlsafe(32))"

# Verificar variables de entorno:
# python -c "from dotenv import load_dotenv; load_dotenv(); import os; print('DATABASE_URL:', os.getenv('DATABASE_URL'))"
