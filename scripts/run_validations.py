#!/usr/bin/env python3
"""
Script para ejecutar validaciones r√°pidamente
"""

import subprocess
import sys
from pathlib import Path

def run_command(command, description):
    """Ejecutar comando y mostrar resultado"""
    print(f"\nüîß {description}")
    print(f"   Comando: {command}")
    print("-" * 60)
    
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent
        )
        
        if result.returncode == 0:
            print("‚úÖ √âXITO")
            if result.stdout:
                print(result.stdout)
        else:
            print("‚ùå ERROR")
            if result.stderr:
                print(result.stderr)
            if result.stdout:
                print("STDOUT:", result.stdout)
                
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå ERROR EJECUTANDO COMANDO: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ EJECUTOR R√ÅPIDO DE VALIDACIONES")
    print("=" * 60)
    
    # Verificar que estamos en el directorio correcto
    if not Path("app/validators").exists():
        print("‚ùå Error: No se encontr√≥ el directorio app/validators")
        print("   Aseg√∫rate de ejecutar este script desde la ra√≠z del proyecto")
        return
    
    # Ejecutar tests de validaciones
    success = True
    
    print("üìã Ejecutando tests de validaciones...")
    
    # Test 1: Validaciones de stock
    success &= run_command(
        "python -m pytest tests/test_validations.py::TestStockValidators -v",
        "Tests de validaciones de stock"
    )
    
    # Test 2: Validaciones de √≥rdenes
    success &= run_command(
        "python -m pytest tests/test_validations.py::TestOrderValidators -v",
        "Tests de validaciones de √≥rdenes"
    )
    
    # Test 3: Validaciones de √≥rdenes de compra
    success &= run_command(
        "python -m pytest tests/test_validations.py::TestPurchaseOrderValidators -v",
        "Tests de validaciones de √≥rdenes de compra"
    )
    
    # Test 4: Tests espec√≠ficos del bug
    success &= run_command(
        "python -m pytest tests/test_validations.py::TestOrderCompletionBug -v",
        "Tests espec√≠ficos del bug 'formulario me dice que tengo que completarlo'"
    )
    
    # Test 5: Todos los tests de validaciones
    success &= run_command(
        "python -m pytest tests/test_validations.py -v",
        "Todos los tests de validaciones"
    )
    
    # Mostrar resumen
    print("\n" + "=" * 60)
    if success:
        print("üéâ TODOS LOS TESTS DE VALIDACIONES PASARON")
        print("\n‚úÖ Las validaciones est√°n funcionando correctamente")
        print("‚úÖ El bug 'formulario me dice que tengo que completarlo' est√° solucionado")
        print("‚úÖ El sistema de validaciones centralizadas est√° operativo")
    else:
        print("‚ùå ALGUNOS TESTS FALLARON")
        print("\nüîß Revisa los errores arriba y corrige los problemas")
        print("üí° Aseg√∫rate de que todas las dependencias est√©n instaladas")
    
    print("\nüí° Comandos √∫tiles:")
    print("   python demo_validations.py          # Demostraci√≥n interactiva")
    print("   python -m pytest tests/ -v         # Todos los tests")
    print("   python -m pytest tests/test_validations.py -v --tb=long  # Con m√°s detalles")

if __name__ == "__main__":
    main()
