# Script de inicio r√°pido para Docker (Windows PowerShell)
# ¬°Levanta el Sistema de Gesti√≥n de Inventario en 1 comando!

Write-Host "üöÄ Iniciando Sistema de Gesti√≥n de Inventario con Docker..." -ForegroundColor Green
Write-Host "==================================================" -ForegroundColor Cyan

# Verificar si Docker est√° instalado
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker encontrado: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker no est√° instalado" -ForegroundColor Red
    Write-Host "   Instala Docker Desktop desde: https://docs.docker.com/desktop/install/windows/" -ForegroundColor Yellow
    exit 1
}

# Verificar si Docker Compose est√° instalado
try {
    $composeVersion = docker-compose --version
    Write-Host "‚úÖ Docker Compose encontrado: $composeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker Compose no est√° instalado" -ForegroundColor Red
    Write-Host "   Instala Docker Compose desde: https://docs.docker.com/compose/install/" -ForegroundColor Yellow
    exit 1
}

# Verificar si Docker est√° ejecut√°ndose
try {
    docker info | Out-Null
    Write-Host "‚úÖ Docker est√° ejecut√°ndose" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker no est√° ejecut√°ndose" -ForegroundColor Red
    Write-Host "   Inicia Docker Desktop desde el men√∫ de inicio" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Docker y Docker Compose verificados" -ForegroundColor Green

# Crear directorios necesarios si no existen
Write-Host "üìÅ Creando directorios necesarios..." -ForegroundColor Cyan
if (!(Test-Path "instance")) { New-Item -ItemType Directory -Name "instance" }
if (!(Test-Path "logs")) { New-Item -ItemType Directory -Name "logs" }

# Construir y levantar la aplicaci√≥n
Write-Host "üî® Construyendo imagen Docker..." -ForegroundColor Cyan
docker-compose build

Write-Host "üöÄ Levantando aplicaci√≥n..." -ForegroundColor Cyan
docker-compose up -d

# Esperar a que la aplicaci√≥n est√© lista
Write-Host "‚è≥ Esperando a que la aplicaci√≥n est√© lista..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

# Verificar estado
Write-Host "üîç Verificando estado de la aplicaci√≥n..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:5000" -TimeoutSec 5 -ErrorAction Stop
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ ¬°Aplicaci√≥n iniciada exitosamente!" -ForegroundColor Green
        Write-Host ""
        Write-Host "üåê Accede a la aplicaci√≥n en: http://localhost:5000" -ForegroundColor Cyan
        Write-Host "üìö Documentaci√≥n de la API en: http://localhost:5000/swagger-ui" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "üìã Comandos √∫tiles:" -ForegroundColor Yellow
        Write-Host "   Ver logs: docker-compose logs -f" -ForegroundColor White
        Write-Host "   Detener: docker-compose down" -ForegroundColor White
        Write-Host "   Reiniciar: docker-compose restart" -ForegroundColor White
        Write-Host "   Estado: docker-compose ps" -ForegroundColor White
    }
} catch {
    Write-Host "‚ö†Ô∏è La aplicaci√≥n puede estar a√∫n iniciando..." -ForegroundColor Yellow
    Write-Host "   Revisa los logs con: docker-compose logs -f" -ForegroundColor White
    Write-Host "   O espera unos segundos m√°s y verifica: http://localhost:5000" -ForegroundColor White
}

Write-Host ""
Write-Host "üéâ ¬°Listo! Tu Sistema de Gesti√≥n de Inventario est√° ejecut√°ndose en Docker." -ForegroundColor Green
