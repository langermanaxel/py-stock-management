# Docker Compose para Sistema de Gestión de Inventario
# Incluye la aplicación web y volumen persistente para la base de datos

version: '3.8'

services:
  # =============================================================================
  # Aplicación Web Principal
  # =============================================================================
  web:
    build: .
    container_name: stock_management_web
    ports:
      - "5000:5000"
    environment:
      # Configuración de la aplicación
      - FLASK_APP=run.py
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      
      # Configuración de base de datos
      - SQLALCHEMY_DATABASE_URI=sqlite:///instance/stock_management.db
      - SQLALCHEMY_TRACK_MODIFICATIONS=false
      
      # Configuración JWT
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-change-in-production}
      - JWT_ACCESS_TOKEN_EXPIRES=3600
      - JWT_REFRESH_TOKEN_EXPIRES=86400
      
      # Configuración de la API
      - API_TITLE=Stock Management API
      - API_VERSION=1.0.0
      - OPENAPI_VERSION=3.0.2
      
      # Configuración de logging
      - LOG_LEVEL=INFO
      - LOG_FILE=logs/app.log
      
      # Configuración de CORS
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5000
      
      # Configuración de debug (deshabilitado en producción)
      - DEBUG=false
      
    volumes:
      # Volumen persistente para la base de datos SQLite
      - stock_data:/app/instance
      
      # Volumen para logs (opcional)
      - stock_logs:/app/logs
      
    restart: unless-stopped
    depends_on: []
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
    # Configuración de recursos
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # =============================================================================
  # Base de Datos PostgreSQL (Opcional - para producción)
  # =============================================================================
  # Descomenta si quieres usar PostgreSQL en lugar de SQLite
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: stock_management_db
  #   environment:
  #     - POSTGRES_DB=stock_management
  #     - POSTGRES_USER=stock_user
  #     - POSTGRES_PASSWORD=${DB_PASSWORD:-stock_password}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U stock_user -d stock_management"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # =============================================================================
  # Redis (Opcional - para cache y sesiones)
  # =============================================================================
  # Descomenta si quieres usar Redis para cache
  # redis:
  #   image: redis:7-alpine
  #   container_name: stock_management_redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # =============================================================================
  # Nginx (Opcional - para reverse proxy y SSL)
  # =============================================================================
  # Descomenta si quieres usar Nginx como reverse proxy
  # nginx:
  #   image: nginx:alpine
  #   container_name: stock_management_nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - web
  #   restart: unless-stopped

volumes:
  # Volumen persistente para la base de datos SQLite
  stock_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./instance
  
  # Volumen para logs
  stock_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  # Volúmenes opcionales (descomenta si usas los servicios correspondientes)
  # postgres_data:
  #   driver: local
  # redis_data:
  #   driver: local

networks:
  default:
    name: stock_management_network
    driver: bridge
